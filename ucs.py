# -*- coding: utf-8 -*-
"""UCS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tiQkZ6l4hx6zc39EbBU5EjpxmtYRAxCl
"""

import heapq

# Uniform Cost Search algorithm
def uniform_cost_search(goal, start):
    global graph, cost
    answer = [10**8] * len(goal)

    # Priority queue (min-heap)
    queue = []
    heapq.heappush(queue, (0, start))  # (cost, node)

    visited = set()
    count = 0

    while queue:
        p_cost, p_node = heapq.heappop(queue)

        if p_node in goal:
            index = goal.index(p_node)
            if answer[index] == 10**8:
                count += 1
            answer[index] = min(answer[index], p_cost)
            if count == len(goal):
                return answer

        if p_node not in visited:
            visited.add(p_node)
            for neighbor in graph[p_node]:
                edge_cost = cost.get((p_node, neighbor), float('inf'))
                heapq.heappush(queue, (p_cost + edge_cost, neighbor))

    return answer

if __name__ == '__main__':
    # Create graph
    graph = {
        "X": ["Y", "Z"], "Y": ["W"], "Z": ["Y", "W", "V"],
        "U": ["Y"], "V": ["U", "T", "W", "Z"], "T": ["U", "W"], "W": ["V"]
    }
    cost = {
        ("X", "Y"): 5, ("X", "Z"): 8, ("Y", "W"): 3, ("Z", "Y"): 6,
        ("Z", "W"): 7, ("Z", "V"): 4, ("U", "Y"): 6, ("V", "U"): 5,
        ("V", "T"): 4, ("V", "W"): 7, ("V", "Z"): 4, ("T", "U"): 8,
        ("T", "W"): 5, ("W", "V"): 6
    }

    # Goal state
    goal = ["W"]

    # Get the answer
    answer = uniform_cost_search(goal, "X")

    # Print result
    print("Minimum cost from X to W is =", answer[0])